interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = mean,  col = c("#0198f9", "#f95801"))
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
model <- aov(age ~ sex * bmi, data = data)
summary(model)
model <- aov(age ~ sex * bmi_cat, data = data)
summary(model)
model <- aov(bmi ~ sex * age, data = data)
#view the model output
summary(model)
leveneTest(age ~ ohsdiff, data = data)
leveneTest(ohsdiff ~ age, data = data)
library(car)
library(car)
leveneTest(age ~ ohsdiff, data = data)
leveneTest(ohsdiff ~ age, data = data)
leveneTest(ohsdiff ~ bmi_cat, data = data)
leveneTest(age ~ bmi_cat, data = data)
leveneTest(age ~ ., data = data)
library(car)
detach("package:car", unload = TRUE)
leveneTest(bmi ~ sex, data = data)
library(car)
leveneTest(bmi ~ sex, data = data)
pairwise.t.test(data$bmi, data$sex,
p.adjust.method = "BH", pool.sd = FALSE)
hist(data$age)
##1st.) Check AGE linearity:
#As we saw previously in the q-q plot, age might not be linear. By ploting the histogram we can see if age distribution is skewed or not.
hist(data$age)
#If age has a normal distribution, use de mean, otherwise use the median (ie. fun = mean OR fun = median)
##2nd.A) Spliting bmi in 2 categories:
bmi_2 = ifelse(data$bmi >= 25, "25+", "<25")
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$age, fun = mean,  col = c("#0198f9", "#f95801"))
##2nd.B) Spliting bmi in >2 categories:
bmi_cat=with(data, cut(bmi, breaks = c(0,18.5,25,30,70), labels = c('underweight','normal', 'overweight', 'obese'),right=FALSE))
table(bmi_cat,data$sex)
bmi_cat=with(data, cut(bmi, breaks = c(0,25,30,70), labels = c('<25', 'overweight', 'obese'),right=FALSE))
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = mean,  col = c("#0198f9", "#f95801"))
hist(data$bmi)
dst(data$bmi)
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
library(car)
detach("package:car", unload = TRUE)
library(car)
library(car)
detach("package:car", unload = TRUE)
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
##1st.) Check AGE linearity:
#As we saw previously in the q-q plot, age might not be linear. By ploting the histogram we can see if age distribution is skewed or not.
hist(data$age)
#If age has a normal distribution, use de mean, otherwise use the median (ie. fun = mean OR fun = median)
##2nd.A) Spliting bmi in 2 categories:
bmi_2 = ifelse(data$bmi >= 25, "25+", "<25")
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$age, fun = mean,  col = c("#0198f9", "#f95801"))
##2nd.B) Spliting bmi in >2 categories:
bmi_cat=with(data, cut(bmi, breaks = c(0,18.5,25,30,70), labels = c('underweight','normal', 'overweight', 'obese'),right=FALSE))
table(bmi_cat,data$sex)
bmi_cat=with(data, cut(bmi, breaks = c(0,25,30,70), labels = c('<25', 'overweight', 'obese'),right=FALSE))
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = mean,  col = c("#0198f9", "#f95801"))
##1st.) Check AGE linearity:
#As we saw previously in the q-q plot, age might not be linear. By ploting the histogram we can see if age distribution is skewed or not.
hist(data$age)
#If age has a normal distribution, use de mean, otherwise use the median (ie. fun = mean OR fun = median)
##2nd.A) Spliting bmi in 2 categories:
bmi_2 = ifelse(data$bmi >= 25, "25+", "<25")
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$age, fun = mean,  col = c("#0198f9", "#f95801"))
##2nd.B) Spliting bmi in >2 categories:
bmi_cat=with(data, cut(bmi, breaks = c(0,18.5,25,30,70), labels = c('underweight','normal', 'overweight', 'obese'),right=FALSE))
#table(bmi_cat,data$sex)
bmi_cat=with(data, cut(bmi, breaks = c(0,25,30,70), labels = c('<25', 'overweight', 'obese'),right=FALSE))
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = mean,  col = c("#0198f9", "#f95801"))
names(data)
hist(data$ohsdiff)
##1st.) Check AGE linearity:
#As we saw previously in the q-q plot, age might not be linear. By ploting the histogram we can see if age distribution is skewed or not.
hist(data$ohsdiff)
#If age has a normal distribution, use de mean, otherwise use the median (ie. fun = mean OR fun = median)
##2nd.A) Spliting bmi in 2 categories:
bmi_2 = ifelse(data$bmi >= 25, "25+", "<25")
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$ohsdiff, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$ohsdiff, fun = mean,  col = c("#0198f9", "#f95801"))
##2nd.B) Spliting bmi in >2 categories:
bmi_cat=with(data, cut(bmi, breaks = c(0,18.5,25,30,70), labels = c('underweight','normal', 'overweight', 'obese'),right=FALSE))
#table(bmi_cat,data$sex)
bmi_cat=with(data, cut(bmi, breaks = c(0,25,30,70), labels = c('<25', 'overweight', 'obese'),right=FALSE))
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$ohsdiff, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$ohsdiff, fun = mean,  col = c("#0198f9", "#f95801"))
summary(daya)
summary(data)
exclude = c("ohs6","height", "weight")
names(data[-exclude])
names(data[-c(exclude)])
names(data[-(exclude)])
names(data[(exclude)])
names(data[-exclude])
names(data[-[exclude]])
names(data[-c("age")])
names(data[-c(age)])
missdata
missvars <- c( "eq5d0", "ethnic","imdscore","bmi", "smoking")
data %>% mutate(
miss_eq5d0= ifelse(is.na(eq5d0),1,0))
library(ggcorrplot)
exclude = c("ohs6","height", "weight")
missvars <- c( "eq5d0", "ethnic","imdscore","bmi", "smoking")
missdata_binary =  data %>% mutate(
miss_eq5d0= ifelse(is.na(eq5d0),1,0),
miss_ethnic= ifelse(is.na(ethnic),1,0),
miss_imdscore= ifelse(is.na(imdscore),1,0),
miss_bmi=ifelse(is.na(bmi),1,0),
miss_smoking= ifelse(is.na(smoking),1,0) )
names(missdata_binary)
c("ohs6","height", "weight")+missvars
exclude = c("ohs6","height", "weight", missvars)
exclude
dim(missdata_binary[!exclude])
dim(missdata_binary[exclude])
names(missdata_binary[,-c(exclude)]))
names(missdata_binary[,-c(exclude)])
names(missdata_binary[,-exclude])
names(missdata_binary[-(age)])
names(missdata_binary[-c("age")])
library(misty)
na.test(data)
library(misty)
summary(missdata_binary)
library(mice)
imp = mice(data, maxit=10, m = 50)  #7.1
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+ethnic+imdscore+smoking+occupation)) #7.2
summary(pool(fit), conf.int = TRUE) #7.3
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+imdscore+smoking+occupation)) #7.2
summary(pool(fit), conf.int = TRUE)
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+imdscore+smoking+occupation+eq5d0)) #7.2
summary(pool(fit), conf.int = TRUE)
summary(data)
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+occupation+ohs0)) #7.2
summary(pool(fit), conf.int = TRUE) #7.3
knitr::opts_chunk$set(echo = TRUE)
library(mice)
names(data) #3.1
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")#3.2
# We run the mice code with 0 iterations
imp <- mice(data[impmodel_var], m=5, maxit=0)
meth
# We run the mice code with 0 iterations
imp <- mice(data[impmodel_var], m=5, maxit=0)
rm(list=ls())
#install.packages("dplyr")
library(dplyr)
#See your working directory
getwd()
#Update your working directory to the folder where "hip.data" is stored (if necessary)
update_wd = "NO" #"NO" for keeping the current working directory. "YES" to update, plus including the new path in folder_path variable below.
if(update_wd == "YES"){
folder_path <- ("C:/Users/msanchez/Documents/GitHub/Practical_Imputation/multiple-imputation_with_mice/")  #Remind to use / (NOT \)
setwd(folder_path)}
#load data
data <- read.csv("hip.csv", sep=',')
#Export
#write.csv(data,"hip.csv", row.names = FALSE)
#Display the names of variables in the data set.
names(data)
#transform/include labels to data
data = data %>%
mutate(sex = factor(sex, levels = c(0,1), labels = c("Male","Female")),
retired = factor(retired, levels = c(0,1), labels = c("Not retired","Retired")),
ethnic = factor(ethnic, levels = c(0,1), labels = c("White","Non white")),
side = factor(side, levels = c(0,1), labels = c("Right","Left")),
smoking = factor(smoking, levels = c(0,1), labels = c("Non-smoker","Smoker")),
occupation = factor(data$occupation, levels = c(0,1), labels = c("Non-manual worker","Manual worker")) )
#Observe/explore the data
dim(data)
summary(data)
# We run the mice code with 0 iterations
imp <- mice(data[impmodel_var], m=5, maxit=0)
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")#3.2
imp <- mice(data[impmodel_var], m=5, maxit=0)
imp$method #3.2
class(imp$method)
colnames(imp$method)
names(imp$method)
meth[norm]
library(mice)
names(data) #3.1
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")#3.2
# We run the mice code with 0 iterations
imp <- mice(data[impmodel_var], m=5, maxit=0)
imp$method #3.2
#In this example, mice identifies the correct distribution for each variable. But, if you want to change the method used for bmi, you can do the following:
meth <- imp$method
# Numeric variables - normal distribution (we are using "Linear regression, non-Bayesian" method to impute bmi)
norm <- c("bmi")
# Numeric variables - non-normal distribution
nonnorm <- c("eq5d0", "imdscore")
# Dichotomous variable
log <- c("ethnic", "smoking")
# Turn their methods matrix into the specified imputation models
meth[norm] <- "norm.nob"
meth[nonnorm] <- "pmm"
meth[log] <- "logreg"
imp2 <- mice(data[impmodel_var], m=5, maxit = 0, method = meth)
imp2$method
meth[norm]
library(mice)
names(data) #3.1
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")#3.2
# We run the mice code with 0 iterations
imp <- mice(data[impmodel_var], m=5, maxit=0)
imp$method #3.2
#In this example, mice identifies the correct distribution for each variable. But, if you want to change the method used for bmi, you can do the following:
meth <- imp$method
# Numeric variables - normal distribution (we are using "Linear regression, non-Bayesian" method to impute bmi)
norm <- c("bmi")
# Numeric variables - non-normal distribution
nonnorm <- c("eq5d0", "imdscore")
# Dichotomous variable
log <- c("ethnic", "smoking")
# Turn their methods matrix into the specified imputation models
meth[norm] <- "norm.nob"
meth[nonnorm] <- "pmm"
meth[log] <- "logreg"
meth
library(mice)
names(data) #3.1
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")#3.2
# We run the mice code with 0 iterations
imp <- mice(data[impmodel_var], m=5, maxit=0)
imp$method #3.2
#In this example, mice identifies the correct distribution for each variable. But, if you want to change the method used for bmi, you can do the following:
meth <- imp$method
# Numeric variables - normal distribution (we are using "Linear regression, non-Bayesian" method to impute bmi)
norm <- c("bmi")
# Numeric variables - non-normal distribution
nonnorm <- c("eq5d0", "imdscore")
# Dichotomous variable
log <- c("ethnic", "smoking")
# Turn their methods matrix into the specified imputation models
meth[norm] <- "norm.nob"
meth[nonnorm] <- "pmm"
meth[log] <- "logreg"
imp2 <- mice(data[impmodel_var], m=5, maxit = 0, method = meth)
imp2$method
# create the impute datasets
imp = mice(data, maxit=10, m = 5)  #7.1
# create the impute datasets
imp = mice(data, maxit=10, m = 5)  #7.1
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0)) #7.2
summary(pool(fit), conf.int = TRUE) #7.3
densityplot(imp)
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")#3.2
imp = mice(data[impmodel_var], maxit=10, m = 5)  #7.1
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0)) #7.2
summary(pool(fit), conf.int = TRUE) #7.3
densityplot(imp) #blue line = observed data; red lines = imputed data
stripplot(imp)
densityplot(imp) #blue line = observed data; red lines = imputed data
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")#3.2
imp = mice(data[impmodel_var], maxit=10, m = 5)  #7.1
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0)) #7.2
summary(pool(fit), conf.int = TRUE) #7.3
#Observe which values has been imputed
stripplot(imp) #blue = observed data; red = imputed data
bwplot(imp)
densityplot(imp) #blue line = observed data; red lines = imputed data
fit <- with(imp, glm(ici(imp)~ohsdiff+age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0, family = binomial)) #blue line = observed data; red lines = imputed data
#impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")
fit <- with(imp, glm(ici(imp)~ohsdiff+age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0, family = binomial))
ps <- rep(rowMeans(sapply(fit$analyses, fitted.values)),
imp$m + 1)
xyplot(imp, bmi ~ ps | as.factor(.imp),
xlab = "Probability that record is incomplete",
ylab = "BMI", pch = c(1, 19), col = mdc(1:2))
#impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")
summary(data)
fit <- with(imp, glm(ici(imp)~ohsdiff+age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0, family = binomial))
ps <- rep(rowMeans(sapply(fit$analyses, fitted.values)),
imp$m + 1)
xyplot(imp, bmi ~ ps | as.factor(.imp),
xlab = "Probability that record is incomplete",
ylab = "BMI", pch = c(1, 19), col = mdc(1:2))
xyplot(imp, eq5d0 ~ ps | as.factor(.imp),
xlab = "Probability that record is incomplete",
ylab = "EQ5D0", pch = c(1, 19), col = mdc(1:2))
xyplot(imp, ethnic ~ ps | as.factor(.imp),
xlab = "Probability that record is incomplete",
ylab = "Ethnic", pch = c(1, 19), col = mdc(1:2))
xyplot(imp, imdscore ~ ps | as.factor(.imp),
xlab = "Probability that record is incomplete",
ylab = "imdscore", pch = c(1, 19), col = mdc(1:2))
xyplot(imp, smoking ~ ps | as.factor(.imp),
xlab = "Probability that record is incomplete",
ylab = "Smoking", pch = c(1, 19), col = mdc(1:2))
#impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")
rm(list=ls())
#install.packages("dplyr")
library(dplyr)
#See your working directory
getwd()
#Update your working directory to the folder where "hip.data" is stored (if necessary)
update_wd = "NO" #"NO" for keeping the current working directory. "YES" to update, plus including the new path in folder_path variable below.
if(update_wd == "YES"){
folder_path <- ("C:/Users/msanchez/Documents/GitHub/Practical_Imputation/multiple-imputation_with_mice/")  #Remind to use / (NOT \)
setwd(folder_path)}
#load data
data <- read.csv("hip.csv", sep=',')
#Export
#write.csv(data,"hip.csv", row.names = FALSE)
#Display the names of variables in the data set.
names(data)
#transform/include labels to data
data = data %>%
mutate(sex = factor(sex, levels = c(0,1), labels = c("Male","Female")),
retired = factor(retired, levels = c(0,1), labels = c("Not retired","Retired")),
ethnic = factor(ethnic, levels = c(0,1), labels = c("White","Non white")),
side = factor(side, levels = c(0,1), labels = c("Right","Left")),
smoking = factor(smoking, levels = c(0,1), labels = c("Non-smoker","Smoker")),
occupation = factor(data$occupation, levels = c(0,1), labels = c("Non-manual worker","Manual worker")) )
#Observe/explore the data
dim(data)
summary(data)
#list the variables you want to test
miss_var_list = c("eq5d0", "ethnic", "imdscore", "bmi", "smoking")
complete_var  = c("age", "sex", "ohsdiff","ohs0")
library(ggcorrplot)
#Generate a data frame where missing variables are codified by 0=non-missing value and 1=missing value:
miss_data =  data %>% mutate(
miss_eq5d0= ifelse(is.na(eq5d0),1,0),
miss_ethnic= ifelse(is.na(ethnic),1,0),
miss_imdscore= ifelse(is.na(imdscore),1,0),
miss_bmi=ifelse(is.na(bmi),1,0),
miss_smoking= ifelse(is.na(smoking),1,0) )
corr_var = c("miss_eq5d0", "miss_ethnic", "miss_imdscore", "miss_bmi", "miss_smoking", complete_var)
model.matrix(~0+., data=miss_data[corr_var]) %>%
cor(use="pairwise.complete.obs")  %>%
ggcorrplot(show.diag = F, type="lower", lab=TRUE, lab_size=2)
#list the variables you want to test
miss_var_list = c("eq5d0", "bmi", "ethnic", "imdscore","smoking")
complete_var  = c("age", "sex", "retired", "ohsdiff","side","occupation")
for (v in 1:length(miss_var_list)){
miss_var = ifelse(is.na(data[[miss_var_list[v]]]), 1, 0)
test = glm(miss_var ~ ., data=data[complete_var] )
print(paste("Tested variable: ", miss_var_list[v], sep=""))
print(summary(test))   #Check p_value
}
library(misty)
#We are excluding 'id' from the dataset.
na.test(within(data, rm(id)))
#Selecting variables with missing data
miss_vars <- c( "eq5d0", "ethnic","imdscore", "bmi", "smoking")
#Exploring missing pattern with md.pattern() function
#The md.pattern() function shipped with Multivariate Imputation by Chained Equations (MICE) package can be used to produce a table displaying the missing pattern.
#install.package("mice")
library(mice)
md.pattern(data[miss_vars], plot=FALSE)
#Visual presentation of missing data pattern
#We are using three different functions to display visually the patterns of the missing data in R:
#library(mice)
md.pattern(data[miss_vars], plot=TRUE, rotate.names=TRUE)
#install.package("ggmice")
library(ggmice)
plot_pattern(data[miss_vars], vrb = "all", square = FALSE, rotate = FALSE, cluster = NULL)
#install.packages("VIM")
library(VIM)
aggr(data[miss_vars], numbers=FALSE, prop=TRUE)
#list the variables you want to test
continuous_var = c("age", "eq5d0", "bmi", "imdscore" )
outcome = "ohsdiff"
for (v in 1:length(continuous_var)){
df = cbind(data[continuous_var[v]],outcome = data[[outcome]])
linear_test = lm(outcome ~ ., data = df)
par(mfrow = c(2, 2))
plot(linear_test,main=paste(continuous_var[v],"\n",sep=""))
}
library(ggcorrplot)
#list the variables you want to test
miss_var_list = c("eq5d0", "ethnic", "imdscore", "bmi", "smoking")
auxiliar_var  = c("retired", "satisfaction", "side", "occupation")
#Generate a data frame where missing variables are codified by 0=non-missing value and 1=missing value:
miss_data =  data %>% mutate(
miss_eq5d0= ifelse(is.na(eq5d0),1,0),
miss_ethnic= ifelse(is.na(ethnic),1,0),
miss_imdscore= ifelse(is.na(imdscore),1,0),
miss_bmi=ifelse(is.na(bmi),1,0),
miss_smoking= ifelse(is.na(smoking),1,0) )
corr_var = c("miss_eq5d0", "miss_ethnic", "miss_imdscore", "miss_bmi", "miss_smoking", auxiliar_var)
model.matrix(~0+., data=miss_data[corr_var]) %>%
cor(use="pairwise.complete.obs")  %>%
ggcorrplot(show.diag = F, type="lower", lab=TRUE, lab_size=2)
##1st.) Check outcome distribution:
#By ploting the histogram we can see if the outcome distribution is skewed or not.
hist(data$ohsdiff)
#If the outcome has a normal distribution, use de mean, otherwise use the median (ie. fun = mean OR fun = median)
##2nd.A) Spliting bmi in 2 categories:
bmi_2 = ifelse(data$bmi >= 25, "25+", "<25")
#interaction.plot using median of ohsdiff (outcome)
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$ohsdiff, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of ohsdiff (outcome)
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$ohsdiff, fun = mean,  col = c("#0198f9", "#f95801"))
##2nd.B) Spliting bmi in >2 categories:
bmi_cat=with(data, cut(bmi, breaks = c(0,18.5,25,30,70), labels = c('underweight','normal', 'overweight', 'obese'),right=FALSE))
#table(bmi_cat,data$sex)
bmi_cat=with(data, cut(bmi, breaks = c(0,25,30,70), labels = c('<25', 'overweight', 'obese'),right=FALSE))
#interaction.plot using median of ohsdiff (outcome):
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$ohsdiff, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of ohsdiff (outcome):
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$ohsdiff, fun = mean,  col = c("#0198f9", "#f95801"))
## Try test interaction with other independent variable.
##Categorise varX if needed:
varX_cat = data$ethnic
#interaction.plot using median of ohsdiff (outcome):
interaction.plot(x.factor=varX_cat, trace.factor=data$sex, response=data$ohsdiff, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of ohsdiff (outcome):
interaction.plot(x.factor=varX_cat, trace.factor=data$sex, response=data$ohsdiff, fun = mean,  col = c("#0198f9", "#f95801"))
library(mice)
names(data) #3.1
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")#3.2
# We run the mice code with 0 iterations
imp <- mice(data[impmodel_var], m=5, maxit=0)
imp$method #3.2
#In this example, mice identifies the correct distribution for each variable. But, if you want to change the method used for bmi, you can do the following:
meth <- imp$method
# Numeric variables - normal distribution (we are using "Linear regression, non-Bayesian" method to impute bmi)
norm <- c("bmi")
# Numeric variables - non-normal distribution
nonnorm <- c("eq5d0", "imdscore")
# Dichotomous variable
log <- c("ethnic", "smoking")
# Turn their methods matrix into the specified imputation models
meth[norm] <- "norm.nob"
meth[nonnorm] <- "pmm"
meth[log] <- "logreg"
imp2 <- mice(data[impmodel_var], m=5, maxit = 0, method = meth)
imp2$method
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")#3.2
imp = mice(data[impmodel_var], maxit=10, m = 5)  #7.1
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0)) #7.2
summary(pool(fit), conf.int = TRUE) #7.3
summary(pool(fit), conf.int = TRUE) #7.3
dim(data)
dim(na.omit(data))
#Complete cases results
summary(lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0, data=na.omit(data)))
#Imputed results
summary(pool(fit), conf.int = TRUE) #7.3
#Complete cases results
summary(lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0, data=na.omit(data)),conf.int = TRUE)
#Imputed results
summary(pool(fit), conf.int = TRUE) #7.3
temp=lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0, data=na.omit(data))
summary9temp
summary(temp)
summary(temp, conf.int= TRUE)
summary(lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0, data=na.omit(data)),confint = TRUE)
#Complete cases results
fit0 =lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0, data=na.omit(data))
summary(fit0)
confint(fit0)
#Imputed results
summary(pool(fit), conf.int = TRUE) #7.3
summary(fit0)$coefficients
summary(fit0)$coefficients[1]
summary(fit0)$coefficients[,1]
data.frame(summary(fit0)$coefficients[,1],confint(fit0))
cbind(summary(fit0)$coefficients[,1],confint(fit0))
#Complete cases results
fit0 =lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0, data=na.omit(data))
print( cbind(OR=summary(fit0)$coefficients[,1],confint(fit0)) )
#summary(fit0)
#confint(fit0)
#Imputed results
summary(pool(fit), conf.int = TRUE) #7.3
summary(pool(fit), conf.int = TRUE)[1]
summary(pool(fit), conf.int = TRUE)[1,2,7,8]
summary(pool(fit), conf.int = TRUE)[c(1,2,7,8)]
#Complete cases results:variables names, OR, Low and High CI
fit0 =lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0, data=na.omit(data))
print( cbind(OR=summary(fit0)$coefficients[,1],confint(fit0)) )
#Imputed results: variables names, OR, Low and High CI
summary(pool(fit), conf.int = TRUE)[c(1,2,7,8)]
#Complete cases results:variables names, OR, Low and High CI
fit0 =lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0, data=na.omit(data))
print("Using complete cases")
print( cbind(OR=summary(fit0)$coefficients[,1],confint(fit0)) )
#Imputed results: variables names, OR, Low and High CI
print("Using imputed data")
summary(pool(fit), conf.int = TRUE)[c(1,2,7,8)]
