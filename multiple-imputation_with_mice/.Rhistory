cor(use="pairwise.complete.obs")  %>%
ggcorrplot(show.diag = F, type="lower", lab=TRUE, lab_size=2)
##1st.) Check outcome distribution:
#By ploting the histogram we can see if the outcome distribution is skewed or not.
hist(data$ohsdiff)
#If age has a normal distribution, use de mean, otherwise use the median (ie. fun = mean OR fun = median)
##2nd.A) Spliting bmi in 2 categories:
bmi_2 = ifelse(data$bmi >= 25, "25+", "<25")
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$ohsdiff, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$ohsdiff, fun = mean,  col = c("#0198f9", "#f95801"))
##2nd.B) Spliting bmi in >2 categories:
bmi_cat=with(data, cut(bmi, breaks = c(0,18.5,25,30,70), labels = c('underweight','normal', 'overweight', 'obese'),right=FALSE))
#table(bmi_cat,data$sex)
bmi_cat=with(data, cut(bmi, breaks = c(0,25,30,70), labels = c('<25', 'overweight', 'obese'),right=FALSE))
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$ohsdiff, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$ohsdiff, fun = mean,  col = c("#0198f9", "#f95801"))
#Visual presentation of missing data pattern
#We are using three different functions to display visually the patterns of the missing data in R:
#library(mice)
md.pattern(data[miss_vars], plot=TRUE, rotate.names=TRUE)
#install.package("ggmice")
library(ggmice)
plot_pattern(data[miss_vars], vrb = "all", square = FALSE, rotate = FALSE, cluster = NULL)
#install.packages("VIM")
library(VIM)
aggr(data[miss_vars], labels=names(data), numbers=FALSE, prop=TRUE)
aggr(data[miss_vars], labels=names(miss_data), numbers=FALSE, prop=TRUE)
aggr(data[miss_vars], numbers=FALSE, prop=TRUE)
names(data) #3.1
names(data) #3.1
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")#3.2
names(data) #3.1
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")#3.2
# Specify a separate imputation model for variables of interest
# Numeric variables
num <- c("eq5d0","bmi", "imdscore")
# Dichotomous variable
log <- c("ethnic", "smoking")
# Turn their methods matrix into the specified imputation models
meth[num] <- "pmm"
mice(data[impmodel_var], m=5, maxit=0)
imp <- mice(data[impmodel_var], m=5, maxit=0)
imp$method
imp2 <- mice(data[impmodel_var], maxit = 5, method = meth)
meth[norm] <- "norm.nob"
method
imp$method
method[norm] <- "norm.nob"
meth <- imp$method
# Numeric variables - non-normal distribution
norm <- c("bmi")
# Numeric variables - non-normal distribution
nonnorm <- c("eq5d0", "imdscore")
# Dichotomous variable
log <- c("ethnic", "smoking")
# Turn their methods matrix into the specified imputation models
meth[norm] <- "norm.nob"
meth[nonnorm] <- "pmm"
meth[log] <- "logreg"
imp2 <- mice(data[impmodel_var], maxit = 5, method = meth)
imp2$method
imp2 <- mice(data[impmodel_var], maxit = 5, method = meth)
names(data) #3.1
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")#3.2
# We run the mice code with 0 iterations
imp <- mice(data[impmodel_var], m=5, maxit=0)
imp$method #3.2
#In this example, mice identifies the correct distribution for each variable. But, if for example, if you want to change the method used for bmi, you can do the following:
meth <- imp$method
# Numeric variables - normal distribution (we are using "Linear regression, non-Bayesian" method to impute bmi)
norm <- c("bmi")
# Numeric variables - non-normal distribution
nonnorm <- c("eq5d0", "imdscore")
# Dichotomous variable
log <- c("ethnic", "smoking")
# Turn their methods matrix into the specified imputation models
meth[norm] <- "norm.nob"
meth[nonnorm] <- "pmm"
meth[log] <- "logreg"
imp2 <- mice(data[impmodel_var], maxit = 5, method = meth)
imp2$method
imp = mice(data, maxit=10, m = 5)  #7.1
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")#3.2
imp = mice(data[impmodel_var], maxit=10, m = 5)  #7.1
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0)) #7.2
summary(pool(fit), conf.int = TRUE) #7.3
library(finalfit)
install.packages("finalfit")
library(finalfit)
library(dplyr)
library(MissMech)
install.packages("MissMech")
library(finalfit)
library(dplyr)
library(MissMech)
## Try test interaction with other independent variable.
##Categorise varX if needed:
varX_cat = data$ethnic
#interaction.plot using median of ohsdiff (outcome):
interaction.plot(x.factor=varX_cat, trace.factor=data$sex, response=data$ohsdiff, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of ohsdiff (outcome):
interaction.plot(x.factor=varX_cat, trace.factor=data$sex, response=data$ohsdiff, fun = mean,  col = c("#0198f9", "#f95801"))
#List of the variables you want to test (numeric variables)
num_var = c("age", "eq5d0", "bmi", "imdscore" )
outcome = "ohsdiff"
for (v in 1:length(num_var)){
df = cbind(data[num_var[v]],outcome = data[[outcome]])
linear_test = lm(outcome ~ ., data = df)
par(mfrow = c(2, 2))
plot(linear_test,main=paste(num_var[v],"\n",sep=""))
}
#List of the variables you want to test (numeric variables)
num_var = c("age", "eq5d0", "bmi", "imdscore" )
outcome = "ohsdiff"
for (v in 1:length(num_var)){
df = cbind(data[num_var[v]],outcome = data[[outcome]])
linear_test = lm(outcome ~ ., data = df)
par(mfrow = c(2, 2))
plot(linear_test,main=paste(num_var[v],"\n",sep=""))
}
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
#install.packages("dplyr")
library(dplyr)
#See your working directory
getwd()
#Update your working directory to the folder where "hip.data" is stored (if necessary)
update_wd = "NO" #"NO" for keeping the current working directory. "YES" to update, plus including the new path in folder_path variable below.
if(update_wd == "YES"){
folder_path <- ("C:/Users/msanchez/Documents/GitHub/Practical_Imputation/multiple-imputation_with_mice/")  #Remind to use / (NOT \)
setwd(folder_path)}
#load data
data <- read.csv("hip.csv", sep=',')
#Display the names of variables in the data set.
names(data)
#transform/include labels to data
data = data %>%
mutate(sex = factor(sex, levels = c(0,1), labels = c("Male","Female")),
retired = factor(retired, levels = c(0,1), labels = c("Not retired","Retired")),
ethnic = factor(ethnic, levels = c(0,1), labels = c("White","Non white")),
side = factor(side, levels = c(0,1), labels = c("Right","Left")),
smoking = factor(smoking, levels = c(0,1), labels = c("Non-smoker","Smoker")),
occupation = factor(data$occupation, levels = c(0,1), labels = c("Non-manual worker","Manual worker")) )
#Observe/explore the data
dim(data)
summary(data)
#install.packages("dplyr")
library(dplyr)
#See your working directory
getwd()
#Update your working directory to the folder where "hip.data" is stored (if necessary)
update_wd = "NO" #"NO" for keeping the current working directory. "YES" to update, plus including the new path in folder_path variable below.
if(update_wd == "YES"){
folder_path <- ("C:/Users/msanchez/Documents/GitHub/Practical_Imputation/multiple-imputation_with_mice/")  #Remind to use / (NOT \)
setwd(folder_path)}
#load data
data <- read.csv("hip.csv", sep=',')
#Display the names of variables in the data set.
names(data)
#transform/include labels to data
data = data %>%
mutate(sex = factor(sex, levels = c(0,1), labels = c("Male","Female")),
retired = factor(retired, levels = c(0,1), labels = c("Not retired","Retired")),
ethnic = factor(ethnic, levels = c(0,1), labels = c("White","Non white")),
side = factor(side, levels = c(0,1), labels = c("Right","Left")),
smoking = factor(smoking, levels = c(0,1), labels = c("Non-smoker","Smoker")),
occupation = factor(data$occupation, levels = c(0,1), labels = c("Non-manual worker","Manual worker")) )
#Observe/explore the data
dim(data)
summary(data)
#install.packages("dplyr")
library(dplyr)
#See your working directory
getwd()
#Update your working directory to the folder where "hip.data" is stored (if necessary)
update_wd = "NO" #"NO" for keeping the current working directory. "YES" to update, plus including the new path in folder_path variable below.
if(update_wd == "YES"){
folder_path <- ("C:/Users/msanchez/Documents/GitHub/Practical_Imputation/multiple-imputation_with_mice/")  #Remind to use / (NOT \)
setwd(folder_path)}
#load data
data <- read.csv("hip.csv", sep=',')
#Display the names of variables in the data set.
names(data)
#transform/include labels to data
data = data %>%
mutate(sex = factor(sex, levels = c(0,1), labels = c("Male","Female")),
retired = factor(retired, levels = c(0,1), labels = c("Not retired","Retired")),
ethnic = factor(ethnic, levels = c(0,1), labels = c("White","Non white")),
side = factor(side, levels = c(0,1), labels = c("Right","Left")),
smoking = factor(smoking, levels = c(0,1), labels = c("Non-smoker","Smoker")),
occupation = factor(data$occupation, levels = c(0,1), labels = c("Non-manual worker","Manual worker")) )
#Observe/explore the data
dim(data)
summary(data)
#list the variables you want to test
miss_var_list = c("eq5d0", "ethnic", "imdscore", "bmi", "smoking")
complete_var  = c("age", "sex", "ohsdiff","ohs0")
library(ggcorrplot)
#Generate a data frame where missing variables are codified by 0=non-missing value and 1=missing value:
miss_data =  data %>% mutate(
miss_eq5d0= ifelse(is.na(eq5d0),1,0),
miss_ethnic= ifelse(is.na(ethnic),1,0),
miss_imdscore= ifelse(is.na(imdscore),1,0),
miss_bmi=ifelse(is.na(bmi),1,0),
miss_smoking= ifelse(is.na(smoking),1,0) )
corr_var = c("miss_eq5d0", "miss_ethnic", "miss_imdscore", "miss_bmi", "miss_smoking", complete_var)
model.matrix(~0+., data=miss_data[corr_var]) %>%
cor(use="pairwise.complete.obs")  %>%
ggcorrplot(show.diag = F, type="lower", lab=TRUE, lab_size=2)
#list the variables you want to test
miss_var_list = c("eq5d0", "bmi", "ethnic", "imdscore","smoking")
complete_var  = c("age", "sex", "retired", "ohsdiff","side","occupation")
for (v in 1:length(miss_var_list)){
miss_var = ifelse(is.na(data[[miss_var_list[v]]]), 1, 0)
test = glm(miss_var ~ ., data=data[complete_var] )
print(paste("Tested variable: ", miss_var_list[v], sep=""))
print(summary(test))   #Check p_value
}
library(misty)
#We are excluding 'id' from the dataset.
na.test(within(data, rm(id)))
#Selecting variables of interest
analytic_model <- c("ohsdiff","age", "sex", "ethnic", "eq5d0", "imdscore", "bmi", "smoking", "ohs0")
#Observe/explore number of missing data
summary(data[analytic_model])
#Selecting variables with missing data
miss_vars <- c( "eq5d0", "ethnic","imdscore", "bmi", "smoking")
#Exploring missing pattern with md.pattern() function
library(mice)
md.pattern(data[miss_vars], plot=FALSE)
library(mice)
library(ggmice)
library(VIM)
md.pattern(data[miss_vars], plot=TRUE, rotate.names=TRUE)
plot_pattern(data[miss_vars], vrb = "all", square = FALSE, rotate = FALSE, cluster = NULL)
aggr(data[miss_vars], numbers=FALSE, prop=TRUE)
library(ggcorrplot)
#explore which other variables we have available in the data set
names(data)
#list the variables you want to test
miss_var_list = c("eq5d0", "ethnic", "imdscore", "bmi", "smoking")
auxiliar_var  = c("retired", "satisfaction", "side", "occupation")
#Generate a data frame where missing variables are codified by 0=non-missing value and 1=missing value:
miss_data =  data %>% mutate(
miss_eq5d0= ifelse(is.na(eq5d0),1,0),
miss_ethnic= ifelse(is.na(ethnic),1,0),
miss_imdscore= ifelse(is.na(imdscore),1,0),
miss_bmi=ifelse(is.na(bmi),1,0),
miss_smoking= ifelse(is.na(smoking),1,0) )
corr_var = c("miss_eq5d0", "miss_ethnic", "miss_imdscore", "miss_bmi", "miss_smoking", auxiliar_var)
model.matrix(~0+., data=miss_data[corr_var]) %>%
cor(use="pairwise.complete.obs")  %>%
ggcorrplot(show.diag = F, type="lower", lab=TRUE, lab_size=2)
#List of the variables you want to test (numeric variables)
num_var = c("age", "eq5d0", "bmi", "imdscore" )
outcome = "ohsdiff"
for (v in 1:length(num_var)){
df = cbind(data[num_var[v]],outcome = data[[outcome]])
linear_test = lm(outcome ~ ., data = df)
par(mfrow = c(2, 2))
plot(linear_test,main=paste(num_var[v],"\n",sep=""))
}
##1) Check outcome distribution:
#By ploting the histogram we can see if the outcome distribution is skewed or not.
hist(data$ohsdiff)
#If the outcome has a normal distribution, use de mean, otherwise use the median (ie. fun = mean OR fun = median)
##2.A) Spliting bmi in 2 categories:
bmi_2 = ifelse(data$bmi >= 25, "25+", "<25")
#interaction.plot using median of ohsdiff (outcome)
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$ohsdiff, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of ohsdiff (outcome)
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$ohsdiff, fun = mean,  col = c("#0198f9", "#f95801"))
##2.B) Spliting bmi in >2 categories:
bmi_cat=with(data, cut(bmi, breaks = c(0,18.5,25,30,70), labels = c('underweight','normal', 'overweight', 'obese'),right=FALSE))
bmi_cat=with(data, cut(bmi, breaks = c(0,25,30,70), labels = c('<25', 'overweight', 'obese'),right=FALSE))
#interaction.plot using median of ohsdiff (outcome):
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$ohsdiff, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of ohsdiff (outcome):
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$ohsdiff, fun = mean,  col = c("#0198f9", "#f95801"))
## Try test interaction with other independent variable.
##Categorise varX if needed:
varX_cat = data$ethnic
#interaction.plot using median of ohsdiff (outcome):
interaction.plot(x.factor=varX_cat, trace.factor=data$sex, response=data$ohsdiff, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of ohsdiff (outcome):
interaction.plot(x.factor=varX_cat, trace.factor=data$sex, response=data$ohsdiff, fun = mean,  col = c("#0198f9", "#f95801"))
library(mice)
##3.1) Choose the variables we want to include in the imputation model
names(data)
##3.2) Select them
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")#3.2
#We run the mice code with 0 iterations
imp <- mice(data[impmodel_var], m=5, maxit=0, seed=60109)
#Check the method mice used to impute
imp$method
#mice has identified the correct distribution for each variable. But, if you want to change the method used, you can do the following:
meth <- imp$method
# Numeric variables - normal distribution (we are using "Linear regression, non-Bayesian" method to impute bmi)
norm <- c("bmi")
# Numeric variables - non-normal distribution
nonnorm <- c("eq5d0", "imdscore")
# Dichotomous variable
log <- c("ethnic", "smoking")
# Turn their methods matrix into the specified imputation models
meth[norm] <- "norm.nob"
meth[nonnorm] <- "pmm"
meth[log] <- "logreg"
imp2 <- mice(data[impmodel_var], m=5, maxit = 0, method = meth, seed=60109)
#Check that mice is using the specific method
imp2$method
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")
imp = mice(data[impmodel_var], maxit=10, m = 5, seed=60109)  #7.1
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0)) #7.2
summary(pool(fit), conf.int = TRUE) #7.3
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")
imp = mice(data[impmodel_var], maxit=10, m = 5, seed=60109)  #7.1
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0)) #7.2
summary(pool(fit), conf.int = TRUE) #7.3
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")#3.2
imp = mice(data[impmodel_var], maxit=10, m = 5, seed=60109)  #7.1
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0)) #7.2
summary(pool(fit), conf.int = TRUE) #7.3
#Observe which values has been imputed
stripplot(imp) #blue = observed data; red = imputed data
bwplot(imp)    #blue = observed data; red = imputed data
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")#3.2
imp = mice(data[impmodel_var], maxit=10, m = 5, seed=60109)  #7.1
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0)) #7.2
summary(pool(fit), conf.int = TRUE) #7.3
#Observe which values has been imputed
stripplot(imp) #blue = observed data; red = imputed data
bwplot(imp)    #blue = observed data; red = imputed data
densityplot(imp) #blue line = observed data; red lines = imputed data
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")#3.2
imp = mice(data[impmodel_var], maxit=10, m = 5, seed=60109)  #7.1
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0)) #7.2
summary(pool(fit), conf.int = TRUE) #7.3
#Observe which values has been imputed
stripplot(imp) #blue = observed data; red = imputed data
bwplot(imp)    #blue = observed data; red = imputed data
densityplot(imp) #blue line = observed data; red lines = imputed data
#Model the probability of each record being incomplete as a function of all variables in each imputed data set.
fit <- with(imp, glm(ici(imp)~ohsdiff+age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0, family = binomial))
# The probabilities (propensities) are then averaged over the imputed datasets to obtain stability.
ps <- rep(rowMeans(sapply(fit$analyses, fitted.values)),
imp$m + 1)
#Plot the each variable against the propensity score in each dataset:
#blue = observed data; red = imputed data
xyplot(imp, bmi ~ ps | as.factor(.imp),
xlab = "Probability that record is incomplete",
ylab = "BMI", pch = c(1, 19), col = mdc(1:2))
xyplot(imp, eq5d0 ~ ps | as.factor(.imp),
xlab = "Probability that record is incomplete",
ylab = "EQ5D0", pch = c(1, 19), col = mdc(1:2))
xyplot(imp, ethnic ~ ps | as.factor(.imp),
xlab = "Probability that record is incomplete",
ylab = "Ethnic", pch = c(1, 19), col = mdc(1:2))
xyplot(imp, imdscore ~ ps | as.factor(.imp),
xlab = "Probability that record is incomplete",
ylab = "imdscore", pch = c(1, 19), col = mdc(1:2))
xyplot(imp, smoking ~ ps | as.factor(.imp),
xlab = "Probability that record is incomplete",
ylab = "Smoking", pch = c(1, 19), col = mdc(1:2))
#impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")
#Complete cases results:variables names, OR, Low and High CI
fit0 =lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0, data=na.omit(data))
print("Using complete cases")
print( cbind(OR=summary(fit0)$coefficients[,1],confint(fit0)) )
#Imputed results: variables names, OR, Low and High CI
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0))
print("Using imputed data")
summary(pool(fit), conf.int = TRUE)[c(1,2,7,8)]
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")#3.2
imp = mice(data[impmodel_var], maxit=10, m = 5, seed=60109)   #9.1
imp.data = complete(imp , "long")   #9.2
table(imp.data$.imp)                #9.3
Fit.list = vector("list", length(unique(imp.data$.imp))) #9.4
Fit.list2= vector("list", length(unique(imp.data$.imp))) #9.4
for (i in unique(imp.data$.imp)) {  #9.5 Loop start
fit = lm(ohsdiff~age+sex+ethnic+eq5d0+imdscore+bmi+smoking+ohs0, data = imp.data[imp.data$.imp == i,])
Fit.list[[i]]= summary(fit)
} #9.5
Fit.list.mira = as.mira(Fit.list)   #9.6 Loop end
summary(pool(Fit.list.mira),conf.int = TRUE) #9.7
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")#3.2
imp = mice(data[impmodel_var], maxit=10, m = 5, seed=60109)   #9.1
imp.data = complete(imp , "long")   #9.2
table(imp.data$.imp)                #9.3
Fit.list = vector("list", length(unique(imp.data$.imp))) #9.4
Fit.list2= vector("list", length(unique(imp.data$.imp))) #9.4
for (i in unique(imp.data$.imp)) {  #9.5 Loop start
fit = lm(ohsdiff~age+sex+ethnic+eq5d0+imdscore+bmi+smoking+ohs0, data = imp.data[imp.data$.imp == i,])
Fit.list[[i]]= summary(fit)
} #9.5
Fit.list.mira = as.mira(Fit.list)   #9.6 Loop end
summary(pool(Fit.list.mira),conf.int = TRUE) #9.7
pool.compare(fit, fit0, method = c("wald", "likelihood"), data = NULL)
class(fit)
class(fit0)
pool.compare(mira(fit), mira(fit0), method = c("wald", "likelihood"), data = NULL)
pool.compare(as.mira(fit), as.mira(fit0), method = c("wald", "likelihood"), data = NULL)
#install.packages("dplyr")
library(dplyr)
#See your working directory
getwd()
#Update your working directory to the folder where "hip.data" is stored (if necessary)
update_wd = "NO" #"NO" for keeping the current working directory. "YES" to update, plus including the new path in folder_path variable below.
if(update_wd == "YES"){
folder_path <- ("C:/")  #Remind to use / (NOT \)
setwd(folder_path)}
#load data
data <- read.csv("hip.csv", sep=',')
#Display the names of variables in the data set.
names(data)
#transform/include labels to data
data = data %>%
mutate(sex = factor(sex, levels = c(0,1), labels = c("Male","Female")),
retired = factor(retired, levels = c(0,1), labels = c("Not retired","Retired")),
ethnic = factor(ethnic, levels = c(0,1), labels = c("White","Non white")),
side = factor(side, levels = c(0,1), labels = c("Right","Left")),
smoking = factor(smoking, levels = c(0,1), labels = c("Non-smoker","Smoker")),
occupation = factor(data$occupation, levels = c(0,1), labels = c("Non-manual worker","Manual worker")) )
#Observe/explore the data
dim(data)
summary(data)
#list the variables you want to test
miss_var_list = c("eq5d0", "ethnic", "imdscore", "bmi", "smoking")
complete_var  = c("age", "sex", "ohsdiff","ohs0")
library(ggcorrplot)
#Generate a data frame where missing variables are codified by 0=non-missing value and 1=missing value:
miss_data =  data %>% mutate(
miss_eq5d0= ifelse(is.na(eq5d0),1,0),
miss_ethnic= ifelse(is.na(ethnic),1,0),
miss_imdscore= ifelse(is.na(imdscore),1,0),
miss_bmi=ifelse(is.na(bmi),1,0),
miss_smoking= ifelse(is.na(smoking),1,0) )
corr_var = c("miss_eq5d0", "miss_ethnic", "miss_imdscore", "miss_bmi", "miss_smoking", complete_var)
model.matrix(~0+., data=miss_data[corr_var]) %>%
cor(use="pairwise.complete.obs")  %>%
ggcorrplot(show.diag = F, type="lower", lab=TRUE, lab_size=2)
#list the variables you want to test
miss_var_list = c("eq5d0", "ethnic", "imdscore", "bmi", "smoking")
complete_var  = c("age", "sex", "ohsdiff","ohs0")
library(ggcorrplot)
#Generate a data frame where missing variables are codified by 0=non-missing value and 1=missing value:
miss_data =  data %>% mutate(
miss_eq5d0= ifelse(is.na(eq5d0),1,0),
miss_ethnic= ifelse(is.na(ethnic),1,0),
miss_imdscore= ifelse(is.na(imdscore),1,0),
miss_bmi=ifelse(is.na(bmi),1,0),
miss_smoking= ifelse(is.na(smoking),1,0) )
corr_var = c("miss_eq5d0", "miss_ethnic", "miss_imdscore", "miss_bmi", "miss_smoking", complete_var)
model.matrix(~0+., data=miss_data[corr_var]) %>%
cor(use="pairwise.complete.obs")  %>%
ggcorrplot(show.diag = F, type="lower", lab=TRUE, lab_size=2)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
#install.packages("dplyr")
library(dplyr)
#See your working directory
getwd()
#Update your working directory to the folder where "hip.data" is stored (if necessary)
update_wd = "NO" #"NO" for keeping the current working directory. "YES" to update, plus including the new path in folder_path variable below.
if(update_wd == "YES"){
folder_path <- ("C:/")  #Remind to use / (NOT \)
setwd(folder_path)}
#load data
data <- read.csv("hip.csv", sep=',')
#Display the names of variables in the data set.
names(data)
#transform/include labels to data
data = data %>%
mutate(sex = factor(sex, levels = c(0,1), labels = c("Male","Female")),
retired = factor(retired, levels = c(0,1), labels = c("Not retired","Retired")),
ethnic = factor(ethnic, levels = c(0,1), labels = c("White","Non white")),
side = factor(side, levels = c(0,1), labels = c("Right","Left")),
smoking = factor(smoking, levels = c(0,1), labels = c("Non-smoker","Smoker")),
occupation = factor(data$occupation, levels = c(0,1), labels = c("Non-manual worker","Manual worker")) )
#Observe/explore the data
dim(data)
summary(data)
knitr::opts_chunk$set(echo = TRUE)
library(misty)
#We are excluding 'id' from the dataset.
na.test(within(data, rm(id)))
#Complete cases results:variables names, OR, Low and High CI
fit0 =lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0, data=na.omit(data))
print("Using complete cases")
print( cbind(OR=summary(fit0)$coefficients[,1],confint(fit0)) )
#Imputed results: variables names, OR, Low and High CI
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0))
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking") #3.2
imp = mice(data[impmodel_var], maxit=10, m = 5, seed=60109)  #4.1
library(mice)
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking") #3.2
imp = mice(data[impmodel_var], maxit=10, m = 5, seed=60109)  #4.1
imp_15 = mice(data[impmodel_var], maxit=10, m = 15, seed=60109)  #4.1
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0)) #4.2
summary(pool(fit), conf.int = TRUE) #4.3
#Observe which values has been imputed
stripplot(imp) #blue = observed data; red = imputed data
bwplot(imp)    #blue = observed data; red = imputed data
fit15 = with(data=imp_15,expr = lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0))
pool.compare(fit, fit15, method = c("wald", "likelihood"), data = NULL)
D1(fit, fit15, method = c("wald", "likelihood"), data = NULL)
pool.compare(fit, fit15, method = c("wald", "likelihood"), data = NULL)
plot(imp)
plot(imp_15)
