summary(datos2)
summary(data2)
#transform/include labels to data
data2 = data %>%
mutate(sex = factor(sex, levels = c(0,1), labels = c("Male","Female")),
retired = factor(retired, levels = c(0,1), labels = c("Not retired","Retired")),
ethnic = factor(ethnic, levels = c(0,1), labels = c("White","Non white")),
side = factor(side, levels = c(0,1), labels = c("Right","Left")),
smoking = factor(smoking, levels = c(0,1), labels = c("Non-smoker","Smoker")),
occupation = factor(data$occupation, levels = c(0,1), labels = c("Non-manual worker","Manual worker")) )
summary(data2)
length(names(data2))
Summary(data)
summary(data)
#Export
write.csv(data,"hip2.csv", row.names = TRUE)
#load data
data2 <- read.csv("hip2.csv", sep=',')
View(data2)
head(data)
#Export
write.csv(data,"hip2.csv", row.names = FALSE)
data2 <- read.csv("hip2.csv", sep=',')
#Export
write.csv(data,"hip.csv", row.names = FALSE)
rm(list=ls())
#install.packages("dplyr")
library(dplyr)
#See your working directory
getwd()
#Update your working directory to the folder where "hip.data" is stored (if necessary)
update_wd = "NO" #"NO" for keeping the current working directory. "YES" to update, plus including the new path in folder_path variable below.
if(update_wd == "YES"){
folder_path <- ("C:/Users/msanchez/Documents/GitHub/Practical_Imputation/multiple-imputation_with_mice/")  #Remind to use / (NOT \)
setwd(folder_path)}
#load data
data <- read.csv("hip.csv", sep=',')
#Export
#write.csv(data,"hip.csv", row.names = FALSE)
#Display the names of variables in the data set.
names(data)
#transform/include labels to data
data = data %>%
mutate(sex = factor(sex, levels = c(0,1), labels = c("Male","Female")),
retired = factor(retired, levels = c(0,1), labels = c("Not retired","Retired")),
ethnic = factor(ethnic, levels = c(0,1), labels = c("White","Non white")),
side = factor(side, levels = c(0,1), labels = c("Right","Left")),
smoking = factor(smoking, levels = c(0,1), labels = c("Non-smoker","Smoker")),
occupation = factor(data$occupation, levels = c(0,1), labels = c("Non-manual worker","Manual worker")) )
#Observe/explore the data
dim(data)
summary(data)
#list the variables you want to test
test_var_list = c("eq5d0", "height", "weight", "bmi", "satisfaction", "ethnic", "imdscore")
complete_var  = c("age", "sex", "retired", "ohsdiff","side")
for (v in 1:length(test_var_list)){
test_var = ifelse(is.na(data[[test_var_list[v]]]), 1,0 )
test = glm(test_var ~ ., data=data[complete_var] )
print(paste("Tested variable: ", test_var_list[v], sep=""))
print(summary(test))   #Check p_value
}
library(misty)
na.test(data)
library(misty)
na.test(data)
summary(data)
#list the variables you want to test
test_var_list = c("eq5d0", "height", "weight", "bmi", "satisfaction", "ethnic", "imdscore","smoking")
complete_var  = c("age", "sex", "retired", "ohsdiff","side","occupation")
for (v in 1:length(test_var_list)){
test_var = ifelse(is.na(data[[test_var_list[v]]]), 1,0 )
test = glm(test_var ~ ., data=data[complete_var] )
print(paste("Tested variable: ", test_var_list[v], sep=""))
print(summary(test))   #Check p_value
}
summary(data)
cor(data, method = "pearson", use = "complete.obs")
cor(data, method = "pearson")
cor(data)
cor(matrix(data))
matrix(data))
matrix(data)
data
as.matrix(data)
cor(as.matrix(data))
model.matrix(~0+., data=data) %>%
cor(use="pairwise.complete.obs")
library(ggcorrplot)
install.packages("ggcorrplot")
library(ggcorrplot)
model.matrix(~0+., data=data) %>%
cor(use="pairwise.complete.obs")
library(ggcorrplot)
model.matrix(~0+., data=data) %>%
cor(use="pairwise.complete.obs")  %>%
ggcorrplot(show.diag = F, type="lower", lab=TRUE, lab_size=2)
library(ggcorrplot)
model.matrix(~0+., data=data) %>%
cor(use="pairwise.complete.obs")  %>%
ggcorrplot(show.diag = T, type="lower", lab=TRUE, lab_size=2)
library(ggcorrplot)
model.matrix(~0+., data=data) %>%
cor(use="pairwise.complete.obs")  %>%
ggcorrplot(show.diag = F, type="lower", lab=TRUE, lab_size=2)
library(ggcorrplot)
model.matrix(~0+., data=data) %>%
cor(use="pairwise.complete.obs")  %>%
ggcorrplot(show.diag = F, type="lower", lab=TRUE, lab_size=1)
library(ggcorrplot)
model.matrix(~0+., data=data) %>%
cor(use="pairwise.complete.obs")  %>%
ggcorrplot(show.diag = F, type="lower", lab=TRUE, lab_size=3)
library(ggcorrplot)
model.matrix(~0+., data=data) %>%
cor(use="pairwise.complete.obs")  %>%
ggcorrplot(show.diag = F, type="lower", lab=TRUE, lab_size=2)
#list the variables you want to test
test_var_list = c("eq5d0", "height", "weight", "bmi", "satisfaction", "ethnic", "imdscore","smoking")
complete_var  = c("age", "sex", "retired", "ohsdiff","side","occupation")
for (v in 1:length(test_var_list)){
test_var = ifelse(is.na(data[[test_var_list[v]]]), 1,0 )
test = glm(test_var ~ ., data=data[complete_var] )
print(paste("Tested variable: ", test_var_list[v], sep=""))
print(summary(test))   #Check p_value
}
library(misty)
na.test(data)
summary(data)
#Selecting variables with missing data
missvars <- c( "eq5d0","height", "weight", "satisfaction", "ethnic","imdscore",  "bmi", "smoking")
missdata <- data[missvars]
#Exploring missing pattern with md.pattern() function
#The md.pattern() function shipped with Multivariate Imputation by Chained Equations (MICE) package can be used to produce a table displaying the missing pattern.
#install.package("mice")
library(mice)
md.pattern(missdata, plot=FALSE)
#Selecting variables with missing data
missvars <- c( "eq5d0","height", "weight", "satisfaction", "ethnic","imdscore",  "bmi", "smoking")
missdata <- data[missvars]
#Exploring missing pattern with md.pattern() function
#The md.pattern() function shipped with Multivariate Imputation by Chained Equations (MICE) package can be used to produce a table displaying the missing pattern.
#install.package("mice")
library(mice)
md.pattern(missdata, plot=FALSE)
#Selecting variables with missing data
missvars <- c( "eq5d0","height", "weight", "satisfaction", "ethnic","imdscore",  "bmi", "smoking")
missdata <- data[missvars]
#Exploring missing pattern with md.pattern() function
#The md.pattern() function shipped with Multivariate Imputation by Chained Equations (MICE) package can be used to produce a table displaying the missing pattern.
#install.package("mice")
library(mice)
md.pattern(missdata, plot=FALSE)
summary(missdata)
#Visual presentation of missing data pattern
#We are using three different functions to display visually the patterns of the missing data in R:
#library(mice)
md.pattern(missdata, plot=TRUE, rotate.names=TRUE)
#install.package("ggmice")
library(ggmice)
plot_pattern(missdata, vrb = "all", square = FALSE, rotate = TRUE, cluster = NULL)
#install.packages("VIM")
library(VIM)
aggr(missdata, labels=names(data), numbers=FALSE, prop=TRUE)
#Visual presentation of missing data pattern
#We are using three different functions to display visually the patterns of the missing data in R:
#library(mice)
md.pattern(missdata, plot=TRUE, rotate.names=TRUE)
#install.package("ggmice")
library(ggmice)
plot_pattern(missdata, vrb = "all", square = FALSE, rotate = TRUE, cluster = NULL)
#install.packages("VIM")
library(VIM)
aggr(missdata, labels=names(data), numbers=FALSE, prop=TRUE)
summary(data)
#list the variables you want to test
test_var_list = c("age", "eq5d0", "height", "weight", "satisfaction", "bmi", "imdscore" )
outcome = "ohsdiff"
for (v in 1:length(test_var_list)){
df = cbind(data[test_var_list[v]],outcome = data[[outcome]])
#df= as.data.frame(df) #remove tibble
test = lm(outcome ~ ., data = df)
par(mfrow = c(2, 2))
plot(test,main=paste(test_var_list[v],"\n",sep=""))
}
#list the variables you want to test
test_var_list = c("age", "eq5d0", "height", "weight", "satisfaction", "bmi", "imdscore" )
outcome = "ohsdiff"
for (v in 1:length(test_var_list)){
df = cbind(data[test_var_list[v]],outcome = data[[outcome]])
#df= as.data.frame(df) #remove tibble
test = lm(outcome ~ ., data = df)
par(mfrow = c(2, 2))
plot(test,main=paste(test_var_list[v],"\n",sep=""))
}
library(ggcorrplot)
model.matrix(~0+., data=data) %>%
cor(use="pairwise.complete.obs")  %>%
ggcorrplot(show.diag = F, type="lower", lab=TRUE, lab_size=2)
names(data)
#interaction.plot(x.factor = data$age, trace.factor = data$sex, response = data$bmi, fun = mean,  col = c("#0198f9", "#f95801")
#)
#temp = data %>% na.omit() %>% mutate(age_cat = cut(age, breaks = seq(30, 100, by = 10)))
#temp = data %>% mutate(age_cat = cut(age, breaks = seq(30, 100, by = 10)))
#interaction.plot(x.factor = temp$cat_age, trace.factor = temp$sex, response = temp$bmi, fun = mean,  col = c("#0198f9", "#f95801"))
#interaction.plot(data$sex, data$improve, data$bmi)
#interaction.plot(data$sex, data$improve, data$ohsdiff)
interaction.plot(missdata$sex, missdata$improve, missdata$ohsdiff)
#interaction.plot(x.factor = data$age, trace.factor = data$sex, response = data$bmi, fun = mean,  col = c("#0198f9", "#f95801")
#)
#temp = data %>% na.omit() %>% mutate(age_cat = cut(age, breaks = seq(30, 100, by = 10)))
#temp = data %>% mutate(age_cat = cut(age, breaks = seq(30, 100, by = 10)))
#interaction.plot(x.factor = temp$cat_age, trace.factor = temp$sex, response = temp$bmi, fun = mean,  col = c("#0198f9", "#f95801"))
#interaction.plot(data$sex, data$improve, data$bmi)
#interaction.plot(data$sex, data$improve, data$ohsdiff)
interaction.plot(missdata$sex, missdata$improve, missdata$ohsdiff)
summary(data)
#interaction.plot(x.factor = data$age, trace.factor = data$sex, response = data$bmi, fun = mean,  col = c("#0198f9", "#f95801")
#)
#temp = data %>% na.omit() %>% mutate(age_cat = cut(age, breaks = seq(30, 100, by = 10)))
#temp = data %>% mutate(age_cat = cut(age, breaks = seq(30, 100, by = 10)))
#interaction.plot(x.factor = temp$cat_age, trace.factor = temp$sex, response = temp$bmi, fun = mean,  col = c("#0198f9", "#f95801"))
#interaction.plot(data$sex, data$improve, data$bmi)
#interaction.plot(data$sex, data$improve, data$ohsdiff)
interaction.plot(missdata$sex, missdata$bmi)
#interaction.plot(x.factor = data$age, trace.factor = data$sex, response = data$bmi, fun = mean,  col = c("#0198f9", "#f95801")
#)
#temp = data %>% na.omit() %>% mutate(age_cat = cut(age, breaks = seq(30, 100, by = 10)))
#temp = data %>% mutate(age_cat = cut(age, breaks = seq(30, 100, by = 10)))
#interaction.plot(x.factor = temp$cat_age, trace.factor = temp$sex, response = temp$bmi, fun = mean,  col = c("#0198f9", "#f95801"))
#interaction.plot(data$sex, data$improve, data$bmi)
#interaction.plot(data$sex, data$improve, data$ohsdiff)
interaction.plot(data$sex, data$bmi)
interaction.plot(x.factor=data$sex,response=data$bmi)
summary(data$bmi)
#interaction.plot(data$sex, data$improve, data$ohsdiff)
bmi_cat = ifelse(data$bmi >= 25, "25+", "<25")
table(bmi_cat)'
table(bmi_cat,useNA = "always")
length(bmi_cat)
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age)
#interaction.plot(data$sex, data$improve, data$ohsdiff)
bmi_cat = ifelse(data$bmi >= 25, "25+", "<25")
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, title = "a")
#interaction.plot(x.factor = data$age, trace.factor = data$sex, response = data$bmi, fun = mean,  col = c("#0198f9", "#f95801")
#)
#temp = data %>% na.omit() %>% mutate(age_cat = cut(age, breaks = seq(30, 100, by = 10)))
#temp = data %>% mutate(age_cat = cut(age, breaks = seq(30, 100, by = 10)))
#interaction.plot(x.factor = temp$cat_age, trace.factor = temp$sex, response = temp$bmi, fun = mean,  col = c("#0198f9", "#f95801"))
#interaction.plot(data$sex, data$improve, data$bmi)
#interaction.plot(data$sex, data$improve, data$ohsdiff)
bmi_cat = ifelse(data$bmi >= 25, "25+", "<25")
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = mean,  col = c("#0198f9", "#f95801"))
#interaction.plot(x.factor = data$age, trace.factor = data$sex, response = data$bmi, fun = mean,  col = c("#0198f9", "#f95801")
#)
#temp = data %>% na.omit() %>% mutate(age_cat = cut(age, breaks = seq(30, 100, by = 10)))
#temp = data %>% mutate(age_cat = cut(age, breaks = seq(30, 100, by = 10)))
#interaction.plot(x.factor = temp$cat_age, trace.factor = temp$sex, response = temp$bmi, fun = mean,  col = c("#0198f9", "#f95801"))
#interaction.plot(data$sex, data$improve, data$bmi)
#interaction.plot(data$sex, data$improve, data$ohsdiff)
bmi_cat = ifelse(data$bmi >= 25, "25+", "<25")
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
summary(data$age)
hist(data$age)
#interaction.plot using median
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using median
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = mean,  col = c("#0198f9", "#f95801"))
bmi_cat = ifelse(data$bmi >= 25, "25+", "<25")
#interaction.plot using median
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = mean,  col = c("#0198f9", "#f95801"))
summary(bmi_cat)
summary(bmi)
summary(data$bmi)
with(data, cut(bmi, breaks = c(0,18.5,25,30,70 ))
table(with(data, cut(bmi, breaks = c(0,18.5,25,30,70 )))
)
table(with(data, cut(bmi, breaks = c(0,18.4999,24.999,29.999,70))
)
)
table(with(data, cut(bmi, breaks = c(0,17.4999,24.999,29.999,70))))
table(with(data, cut(bmi, breaks = c(0,17.3999,24.999,29.999,70))))
table(with(data, cut(bmi, breaks = c(0,17.3999,24.999,29.999,70),include.lowest=T)))
table(with(data, cut(bmi, breaks = c(0,17.49,24.9,29.9,70),include.lowest=T)))
table(with(data, cut(bmi, breaks = c(0,17.499,24.99,29.99,70),include.lowest=T)))
table(with(data, cut(bmi, breaks = c(0,17.499,24.99,29.99,70),include.lowest=F)))
table(with(data, cut(bmi, breaks = c(0,17.5,25,30,70),include.lowest=F)))
table(with(data, cut(bmi, breaks = c(0,17.5,25,30,70),include.lowest=FALSE)))
table(with(data, cut(bmi, breaks = c(0,17.5,25,30,70),include.lowest=TRUE)))
table(with(data, cut(bmi, breaks = c(0,17.5,25,30,70),include.right=TRUE)))
table(with(data, cut(bmi, breaks = c(0,17.5,25,30,70),include.right=FALSE)))
table(with(data, cut(bmi, breaks = c(0,17.5,25,30,70),right=FALSE)))
table(with(data, cut(bmi, breaks = c(0,18.5,25,30,70),right=FALSE)))
bmi_cat=with(data, cut(bmi, breaks = c(0,18.5,25,30,70), labels = c('underweight','normal', 'overweight', 'obese'),right=FALSE))
table(bmi_cat, useNA = T)
table(bmi_cat, useNA = "always")
#interaction.plot using median
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = mean,  col = c("#0198f9", "#f95801"))
#interaction.plot using median
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
bmi_2 = ifelse(data$bmi >= 25, "25+", "<25")
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$age, fun = mean,  col = c("#0198f9", "#f95801"))
bmi_cat=with(data, cut(bmi, breaks = c(0,18.5,25,30,70), labels = c('underweight','normal', 'overweight', 'obese'),right=FALSE))
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = mean,  col = c("#0198f9", "#f95801"))
#Check AGE linearity:
hist(data$age)
summary(data$age)
age_cat = with(data, cut(age, breaks = c(0,65,100), labels = c('<65','>=65'),right=FALSE))
table(age_cat)
table(age_cat, useNA = "always")
hist(data$bmi)
interaction.plot(x.factor=age_cat, trace.factor=data$sex, response=data$bmi, fun = median,  col = c("#0198f9", "#f95801"))
interaction.plot(x.factor=age_cat, trace.factor=data$sex, response=data$bmi, fun = median,  col = c("#0198f9", "#f95801"))
age_cat = with(data, cut(age, breaks = c(0,65,100), labels = c('<65','>=65'),right=FALSE))
interaction.plot(x.factor=age_cat, trace.factor=data$sex, response=data$bmi, fun = median,  col = c("#0198f9", "#f95801"))
summary(data$bmi)
interaction.plot(x.factor=data$sex, trace.factor=age_cat, response=data$bmi, fun = median,  col = c("#0198f9", "#f95801"))
##1st.) Check AGE linearity:
#As we saw previously in the q-q plot, age might not be linear. By ploting the histogram we can see if age distribution is skewed or not.
hist(data$age)
#If age has a normal distribution, use de mean, otherwise use the median (ie. fun = mean OR fun = median)
##2nd.A) Spliting bmi in 2 categories:
bmi_2 = ifelse(data$bmi >= 25, "25+", "<25")
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$age, fun = mean,  col = c("#0198f9", "#f95801"))
##2nd.B) Spliting bmi in 4 categories:
bmi_cat=with(data, cut(bmi, breaks = c(0,18.5,25,30,70), labels = c('underweight','normal', 'overweight', 'obese'),right=FALSE))
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = mean,  col = c("#0198f9", "#f95801"))
table(data$age, bmi_cat)
table(bmi_cat)
table(bmi_cat,data$sex)
bmi_cat=with(data, cut(bmi, breaks = c(0,25,30,70), labels = c('<25', 'overweight', 'obese'),right=FALSE))
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = mean,  col = c("#0198f9", "#f95801"))
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
model <- aov(age ~ sex * bmi, data = data)
summary(model)
model <- aov(age ~ sex * bmi_cat, data = data)
summary(model)
model <- aov(bmi ~ sex * age, data = data)
#view the model output
summary(model)
leveneTest(age ~ ohsdiff, data = data)
leveneTest(ohsdiff ~ age, data = data)
library(car)
library(car)
leveneTest(age ~ ohsdiff, data = data)
leveneTest(ohsdiff ~ age, data = data)
leveneTest(ohsdiff ~ bmi_cat, data = data)
leveneTest(age ~ bmi_cat, data = data)
leveneTest(age ~ ., data = data)
library(car)
detach("package:car", unload = TRUE)
leveneTest(bmi ~ sex, data = data)
library(car)
leveneTest(bmi ~ sex, data = data)
pairwise.t.test(data$bmi, data$sex,
p.adjust.method = "BH", pool.sd = FALSE)
hist(data$age)
##1st.) Check AGE linearity:
#As we saw previously in the q-q plot, age might not be linear. By ploting the histogram we can see if age distribution is skewed or not.
hist(data$age)
#If age has a normal distribution, use de mean, otherwise use the median (ie. fun = mean OR fun = median)
##2nd.A) Spliting bmi in 2 categories:
bmi_2 = ifelse(data$bmi >= 25, "25+", "<25")
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$age, fun = mean,  col = c("#0198f9", "#f95801"))
##2nd.B) Spliting bmi in >2 categories:
bmi_cat=with(data, cut(bmi, breaks = c(0,18.5,25,30,70), labels = c('underweight','normal', 'overweight', 'obese'),right=FALSE))
table(bmi_cat,data$sex)
bmi_cat=with(data, cut(bmi, breaks = c(0,25,30,70), labels = c('<25', 'overweight', 'obese'),right=FALSE))
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = mean,  col = c("#0198f9", "#f95801"))
hist(data$bmi)
dst(data$bmi)
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
library(car)
detach("package:car", unload = TRUE)
library(car)
library(car)
detach("package:car", unload = TRUE)
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
##1st.) Check AGE linearity:
#As we saw previously in the q-q plot, age might not be linear. By ploting the histogram we can see if age distribution is skewed or not.
hist(data$age)
#If age has a normal distribution, use de mean, otherwise use the median (ie. fun = mean OR fun = median)
##2nd.A) Spliting bmi in 2 categories:
bmi_2 = ifelse(data$bmi >= 25, "25+", "<25")
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$age, fun = mean,  col = c("#0198f9", "#f95801"))
##2nd.B) Spliting bmi in >2 categories:
bmi_cat=with(data, cut(bmi, breaks = c(0,18.5,25,30,70), labels = c('underweight','normal', 'overweight', 'obese'),right=FALSE))
table(bmi_cat,data$sex)
bmi_cat=with(data, cut(bmi, breaks = c(0,25,30,70), labels = c('<25', 'overweight', 'obese'),right=FALSE))
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = mean,  col = c("#0198f9", "#f95801"))
##1st.) Check AGE linearity:
#As we saw previously in the q-q plot, age might not be linear. By ploting the histogram we can see if age distribution is skewed or not.
hist(data$age)
#If age has a normal distribution, use de mean, otherwise use the median (ie. fun = mean OR fun = median)
##2nd.A) Spliting bmi in 2 categories:
bmi_2 = ifelse(data$bmi >= 25, "25+", "<25")
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$age, fun = mean,  col = c("#0198f9", "#f95801"))
##2nd.B) Spliting bmi in >2 categories:
bmi_cat=with(data, cut(bmi, breaks = c(0,18.5,25,30,70), labels = c('underweight','normal', 'overweight', 'obese'),right=FALSE))
#table(bmi_cat,data$sex)
bmi_cat=with(data, cut(bmi, breaks = c(0,25,30,70), labels = c('<25', 'overweight', 'obese'),right=FALSE))
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$age, fun = mean,  col = c("#0198f9", "#f95801"))
names(data)
hist(data$ohsdiff)
##1st.) Check AGE linearity:
#As we saw previously in the q-q plot, age might not be linear. By ploting the histogram we can see if age distribution is skewed or not.
hist(data$ohsdiff)
#If age has a normal distribution, use de mean, otherwise use the median (ie. fun = mean OR fun = median)
##2nd.A) Spliting bmi in 2 categories:
bmi_2 = ifelse(data$bmi >= 25, "25+", "<25")
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$ohsdiff, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$ohsdiff, fun = mean,  col = c("#0198f9", "#f95801"))
##2nd.B) Spliting bmi in >2 categories:
bmi_cat=with(data, cut(bmi, breaks = c(0,18.5,25,30,70), labels = c('underweight','normal', 'overweight', 'obese'),right=FALSE))
#table(bmi_cat,data$sex)
bmi_cat=with(data, cut(bmi, breaks = c(0,25,30,70), labels = c('<25', 'overweight', 'obese'),right=FALSE))
#interaction.plot using median of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$ohsdiff, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of AGE
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$ohsdiff, fun = mean,  col = c("#0198f9", "#f95801"))
summary(daya)
summary(data)
exclude = c("ohs6","height", "weight")
names(data[-exclude])
names(data[-c(exclude)])
names(data[-(exclude)])
names(data[(exclude)])
names(data[-exclude])
names(data[-[exclude]])
names(data[-c("age")])
names(data[-c(age)])
missdata
missvars <- c( "eq5d0", "ethnic","imdscore","bmi", "smoking")
data %>% mutate(
miss_eq5d0= ifelse(is.na(eq5d0),1,0))
library(ggcorrplot)
exclude = c("ohs6","height", "weight")
missvars <- c( "eq5d0", "ethnic","imdscore","bmi", "smoking")
missdata_binary =  data %>% mutate(
miss_eq5d0= ifelse(is.na(eq5d0),1,0),
miss_ethnic= ifelse(is.na(ethnic),1,0),
miss_imdscore= ifelse(is.na(imdscore),1,0),
miss_bmi=ifelse(is.na(bmi),1,0),
miss_smoking= ifelse(is.na(smoking),1,0) )
names(missdata_binary)
c("ohs6","height", "weight")+missvars
exclude = c("ohs6","height", "weight", missvars)
exclude
dim(missdata_binary[!exclude])
dim(missdata_binary[exclude])
names(missdata_binary[,-c(exclude)]))
names(missdata_binary[,-c(exclude)])
names(missdata_binary[,-exclude])
names(missdata_binary[-(age)])
names(missdata_binary[-c("age")])
library(misty)
na.test(data)
library(misty)
summary(missdata_binary)
library(mice)
imp = mice(data, maxit=10, m = 50)  #7.1
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+ethnic+imdscore+smoking+occupation)) #7.2
summary(pool(fit), conf.int = TRUE) #7.3
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+imdscore+smoking+occupation)) #7.2
summary(pool(fit), conf.int = TRUE)
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+imdscore+smoking+occupation+eq5d0)) #7.2
summary(pool(fit), conf.int = TRUE)
summary(data)
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+occupation+ohs0)) #7.2
summary(pool(fit), conf.int = TRUE) #7.3
