nonnorm <- c("eq5d0", "imdscore")
# Dichotomous variable
log <- c("ethnic", "smoking")
# Turn their methods matrix into the specified imputation models
meth[norm] <- "norm.nob"
meth[nonnorm] <- "pmm"
meth[log] <- "logreg"
imp2 <- mice(data[impmodel_var], m=5, maxit = 0, method = meth, seed=60109)
#3.3) Check that mice is using the specific method
imp2$method
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")
imp = mice(data[impmodel_var], maxit=10, m = 5, seed=60109)  #4.1
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0)) #4.2
summary(pool(fit), conf.int = TRUE) #4.3
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking") #3.2
imp = mice(data[impmodel_var], maxit=10, m = 5, seed=60109)  #4.1
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0)) #4.2
summary(pool(fit), conf.int = TRUE) #4.3
#Observe which values has been imputed
stripplot(imp) #blue = observed data; red = imputed data
bwplot(imp)    #blue = observed data; red = imputed data
densityplot(imp) #blue line = observed data; red lines = imputed data
densityplot(imp) #blue line = observed data; red lines = imputed data
densityplot(imp) #blue line = observed data; red lines = imputed data
densityplot(imp) #blue line = observed data; red lines = imputed data
densityplot(imp) #blue line = observed data; red lines = imputed data
knitr::opts_chunk$set(echo = TRUE)
densityplot(imp) #blue line = observed data; red lines = imputed data
densityplot(imp) #blue line = observed data; red lines = imputed data
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
#install.packages("dplyr")
library(dplyr)
library(tibble)
#See your working directory
getwd()
#Update your working directory to the folder where "hip.data" is stored (if necessary)
update_wd = "NO" #"NO" for keeping the current working directory. "YES" to update, plus including the new path in folder_path variable below.
if(update_wd == "YES"){
folder_path <- ("C:/")  #Remind to use / (NOT \)
setwd(folder_path)
}
#load data
data <- tibble(read.csv("hip.csv", sep=','))
#Display the names of variables in the data set.
names(data)
#transform/include labels to data
data = data %>%
mutate(sex = factor(sex, levels = c(0,1), labels = c("Male","Female")),
retired = factor(retired, levels = c(0,1), labels = c("Not retired","Retired")),
ethnic = factor(ethnic, levels = c(0,1), labels = c("White","Non white")),
side = factor(side, levels = c(0,1), labels = c("Right","Left")),
smoking = factor(smoking, levels = c(0,1), labels = c("Non-smoker","Smoker")),
occupation = factor(data$occupation, levels = c(0,1), labels = c("Non-manual worker","Manual worker")) )
#Observe/explore the data
dim(data)
summary(data)
#install.packages("dplyr")
library(dplyr)
library(tibble)
#See your working directory
getwd()
#Update your working directory to the folder where "hip.data" is stored (if necessary)
update_wd = "NO" #"NO" for keeping the current working directory. "YES" to update, plus including the new path in folder_path variable below.
if(update_wd == "YES"){
folder_path <- ("C:/")  #Remind to use / (NOT \)
setwd(folder_path)
}
#load data
data <- tibble(read.csv("hip.csv", sep=','))
#Display the names of variables in the data set.
names(data)
#transform/include labels to data
data = data %>%
mutate(sex = factor(sex, levels = c(0,1), labels = c("Male","Female")),
retired = factor(retired, levels = c(0,1), labels = c("Not retired","Retired")),
ethnic = factor(ethnic, levels = c(0,1), labels = c("White","Non white")),
side = factor(side, levels = c(0,1), labels = c("Right","Left")),
smoking = factor(smoking, levels = c(0,1), labels = c("Non-smoker","Smoker")),
occupation = factor(data$occupation, levels = c(0,1), labels = c("Non-manual worker","Manual worker")) )
#Observe/explore the data
dim(data)
summary(data)
#install.packages("dplyr")
library(dplyr)
library(tibble)
#See your working directory
getwd()
#Update your working directory to the folder where "hip.data" is stored (if necessary)
update_wd = "NO" #"NO" for keeping the current working directory. "YES" to update, plus including the new path in folder_path variable below.
if(update_wd == "YES"){
folder_path <- ("C:/")  #Remind to use / (NOT \)
setwd(folder_path)
}
#load data
data <- tibble(read.csv("hip.csv", sep=','))
#Display the names of variables in the data set.
names(data)
#transform/include labels to data
data = data %>%
mutate(sex = factor(sex, levels = c(0,1), labels = c("Male","Female")),
retired = factor(retired, levels = c(0,1), labels = c("Not retired","Retired")),
ethnic = factor(ethnic, levels = c(0,1), labels = c("White","Non white")),
side = factor(side, levels = c(0,1), labels = c("Right","Left")),
smoking = factor(smoking, levels = c(0,1), labels = c("Non-smoker","Smoker")),
occupation = factor(data$occupation, levels = c(0,1), labels = c("Non-manual worker","Manual worker")) )
#Observe/explore the data
dim(data)
summary(data)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("dplyr")
library(dplyr)
library(tibble)
#See your working directory
getwd()
#Update your working directory to the folder where "hip.data" is stored (if necessary)
update_wd = "NO" #"NO" for keeping the current working directory. "YES" to update, plus including the new path in folder_path variable below.
if(update_wd == "YES"){
folder_path <- ("C:/")  #Remind to use / (NOT \)
setwd(folder_path)
}
#load data
data <- tibble(read.csv("hip.csv", sep=','))
#Display the names of variables in the data set.
names(data)
#transform/include labels to data
data = data %>%
mutate(sex = factor(sex, levels = c(0,1), labels = c("Male","Female")),
retired = factor(retired, levels = c(0,1), labels = c("Not retired","Retired")),
ethnic = factor(ethnic, levels = c(0,1), labels = c("White","Non white")),
side = factor(side, levels = c(0,1), labels = c("Right","Left")),
smoking = factor(smoking, levels = c(0,1), labels = c("Non-smoker","Smoker")),
occupation = factor(data$occupation, levels = c(0,1), labels = c("Non-manual worker","Manual worker")) )
#Observe/explore the data
dim(data)
summary(data)
install.packages("dplyr", "tible")
install.packages("dplyr", "tible")
#install.packages("tible")
library(dplyr)
library(tibble)
#See your working directory
getwd()
#Update your working directory to the folder where "hip.data" is stored (if necessary)
update_wd = "NO" #"NO" for keeping the current working directory. "YES" to update, plus including the new path in folder_path variable below.
if(update_wd == "YES"){
folder_path <- ("C:/")  #Remind to use / (NOT \)
setwd(folder_path)
}
#load data
data <- tibble(read.csv("hip.csv", sep=','))
#Display the names of variables in the data set.
names(data)
#transform/include labels to data
data = data %>%
mutate(sex = factor(sex, levels = c(0,1), labels = c("Male","Female")),
retired = factor(retired, levels = c(0,1), labels = c("Not retired","Retired")),
ethnic = factor(ethnic, levels = c(0,1), labels = c("White","Non white")),
side = factor(side, levels = c(0,1), labels = c("Right","Left")),
smoking = factor(smoking, levels = c(0,1), labels = c("Non-smoker","Smoker")),
occupation = factor(data$occupation, levels = c(0,1), labels = c("Non-manual worker","Manual worker")) )
#Observe/explore the data
dim(data)
summary(data)
rm(list=ls())
install.packages("dplyr", "tible")
install.packages(c("dplyr", "tible")
)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
install.packages("dplyr")
install.packages("tible")
install.packages("dplyr")
library(dplyr)
library(tibble)
#See your working directory
getwd()
#Update your working directory to the folder where "hip.data" is stored (if necessary)
update_wd = "NO" #"NO" for keeping the current working directory. "YES" to update, plus including the new path in folder_path variable below.
if(update_wd == "YES"){
folder_path <- ("C:/")  #Remind to use / (NOT \)
setwd(folder_path)
}
#load data
data <- tibble(read.csv("hip.csv", sep=','))
#Display the names of variables in the data set.
names(data)
#transform/include labels to data
data = data %>%
mutate(sex = factor(sex, levels = c(0,1), labels = c("Male","Female")),
retired = factor(retired, levels = c(0,1), labels = c("Not retired","Retired")),
ethnic = factor(ethnic, levels = c(0,1), labels = c("White","Non white")),
side = factor(side, levels = c(0,1), labels = c("Right","Left")),
smoking = factor(smoking, levels = c(0,1), labels = c("Non-smoker","Smoker")),
occupation = factor(data$occupation, levels = c(0,1), labels = c("Non-manual worker","Manual worker")) )
#Observe/explore the data
dim(data)
summary(data)
#install.packages("dplyr")
library(dplyr)
library(tibble)
#See your working directory
getwd()
#Update your working directory to the folder where "hip.data" is stored (if necessary)
update_wd = "NO" #"NO" for keeping the current working directory. "YES" to update, plus including the new path in folder_path variable below.
if(update_wd == "YES"){
folder_path <- ("C:/")  #Remind to use / (NOT \)
setwd(folder_path)
}
#load data
data <- tibble(read.csv("hip.csv", sep=','))
#Display the names of variables in the data set.
names(data)
#transform/include labels to data
data = data %>%
mutate(sex = factor(sex, levels = c(0,1), labels = c("Male","Female")),
retired = factor(retired, levels = c(0,1), labels = c("Not retired","Retired")),
ethnic = factor(ethnic, levels = c(0,1), labels = c("White","Non white")),
side = factor(side, levels = c(0,1), labels = c("Right","Left")),
smoking = factor(smoking, levels = c(0,1), labels = c("Non-smoker","Smoker")),
occupation = factor(data$occupation, levels = c(0,1), labels = c("Non-manual worker","Manual worker")) )
#Observe/explore the data
dim(data)
summary(data)
#list the variables you want to test
miss_var_list = c("eq5d0", "ethnic", "imdscore", "bmi", "smoking")
complete_var  = c("age", "sex", "ohsdiff","ohs0")
#install.packages("ggcorrplot")
library(ggcorrplot)
#Generate a data frame where missing variables are codified by 0=non-missing value and 1=missing value:
miss_data =  data %>% mutate(
miss_eq5d0= ifelse(is.na(eq5d0),1,0),
miss_ethnic= ifelse(is.na(ethnic),1,0),
miss_imdscore= ifelse(is.na(imdscore),1,0),
miss_bmi=ifelse(is.na(bmi),1,0),
miss_smoking= ifelse(is.na(smoking),1,0) )
corr_var = c("miss_eq5d0", "miss_ethnic", "miss_imdscore", "miss_bmi", "miss_smoking", complete_var)
model.matrix(~0+., data=miss_data[corr_var]) %>%
cor(use="pairwise.complete.obs")  %>%
ggcorrplot(show.diag = F, type="lower", lab=TRUE, lab_size=2)
#list the variables you want to test
miss_var_list = c("eq5d0", "bmi", "ethnic", "imdscore","smoking")
complete_var  = c("age", "sex", "retired", "ohsdiff","side","occupation")
for (v in 1:length(miss_var_list)){
miss_var = ifelse(is.na(data[[miss_var_list[v]]]), 1, 0)
test = glm(miss_var ~ ., data=data[complete_var] )
print(paste("Tested variable: ", miss_var_list[v], sep=""))
print(summary(test))   #Check p_value
}
#list the variables you want to test
miss_var_list = c("eq5d0", "bmi", "ethnic", "imdscore","smoking")
complete_var  = c("age", "sex", "retired", "ohsdiff","side","occupation")
for (v in 1:length(miss_var_list)){
miss_var = ifelse(is.na(data[[miss_var_list[v]]]), 1, 0)
test = glm(miss_var ~ ., data=data[complete_var] )
print(paste("Tested variable: ", miss_var_list[v], sep=""))
print(summary(test))   #Check p_value
}
install.packages("misty")
#install.packages("misty")
library(misty)
#We are excluding 'id' from the dataset.
na.test(within(data, rm(id)))
knitr::opts_chunk$set(echo = TRUE)
library(misty)
#We are excluding 'id' from the dataset.
na.test(within(data, rm(id)))
#install.packages("misty")
library(misty)
#We are excluding 'id' from the dataset.
na.test(within(data, rm(id)))
#Selecting variables of interest
analytic_model <- c("ohsdiff","age", "sex", "ethnic", "eq5d0", "imdscore", "bmi", "smoking", "ohs0")
#Observe/explore number of missing data
summary(data[analytic_model])
#Selecting variables with missing data
miss_vars <- c( "eq5d0", "ethnic","imdscore", "bmi", "smoking")
#Exploring missing pattern with md.pattern() function
#install.packages("mice")
library(mice)
md.pattern(data[miss_vars], plot=FALSE)
#library(mice) #this packages is already above
#install.packages("ggmice")
#install.packages("VIM")
library(ggmice)
library(VIM)
md.pattern(data[miss_vars], plot=TRUE, rotate.names=TRUE)
plot_pattern(data[miss_vars], vrb = "all", square = FALSE, rotate = FALSE, cluster = NULL)
aggr(data[miss_vars], numbers=FALSE, prop=TRUE)
install.packages("ggmice")
install.packages("VIM")
library(ggcorrplot)
#explore which other variables we have available in the data set
names(data)
#list the variables you want to test
miss_var_list = c("eq5d0", "ethnic", "imdscore", "bmi", "smoking")
auxiliar_var  = c("retired", "satisfaction", "side", "occupation")
#Generate a data frame where missing variables are codified by 0=non-missing value and 1=missing value:
miss_data =  data %>% mutate(
miss_eq5d0= ifelse(is.na(eq5d0),1,0),
miss_ethnic= ifelse(is.na(ethnic),1,0),
miss_imdscore= ifelse(is.na(imdscore),1,0),
miss_bmi=ifelse(is.na(bmi),1,0),
miss_smoking= ifelse(is.na(smoking),1,0) )
corr_var = c("miss_eq5d0", "miss_ethnic", "miss_imdscore", "miss_bmi", "miss_smoking", auxiliar_var)
model.matrix(~0+., data=miss_data[corr_var]) %>%
cor(use="pairwise.complete.obs")  %>%
ggcorrplot(show.diag = F, type="lower", lab=TRUE, lab_size=2)
install.packages("ggcorrplot")
##1) Check outcome distribution:
#By ploting the histogram we can see if the outcome distribution is skewed or not.
hist(data$ohsdiff)
#If the outcome has a normal distribution, use de mean, otherwise use the median (ie. fun = mean OR fun = median)
##2.A) Spliting bmi in 2 categories:
bmi_2 = ifelse(data$bmi >= 25, "25+", "<25")
#interaction.plot using median of ohsdiff (outcome)
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$ohsdiff, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of ohsdiff (outcome)
interaction.plot(x.factor=bmi_2, trace.factor=data$sex, response=data$ohsdiff, fun = mean,  col = c("#0198f9", "#f95801"))
##2.B) Spliting bmi in >2 categories:
bmi_cat=with(data, cut(bmi, breaks = c(0,18.5,25,30,70), labels = c('underweight','normal', 'overweight', 'obese'),right=FALSE))
bmi_cat=with(data, cut(bmi, breaks = c(0,25,30,70), labels = c('<25', 'overweight', 'obese'),right=FALSE))
#interaction.plot using median of ohsdiff (outcome):
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$ohsdiff, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of ohsdiff (outcome):
interaction.plot(x.factor=bmi_cat, trace.factor=data$sex, response=data$ohsdiff, fun = mean,  col = c("#0198f9", "#f95801"))
## Try test interaction with other independent variable.
##Categorise varX if needed:
varX_cat = data$ethnic
#interaction.plot using median of ohsdiff (outcome):
interaction.plot(x.factor=varX_cat, trace.factor=data$sex, response=data$ohsdiff, fun = median,  col = c("#0198f9", "#f95801"))
#interaction.plot using mean of ohsdiff (outcome):
interaction.plot(x.factor=varX_cat, trace.factor=data$sex, response=data$ohsdiff, fun = mean,  col = c("#0198f9", "#f95801"))
#library(mice) #this packages is already above
##3.1) Choose the variables we want to include in the imputation model
names(data)
##3.2) Select them
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking") #3.2
#We run the mice code with 0 iterations (it is just for the purpose of this example)
imp <- mice(data[impmodel_var], m=5, maxit=0, seed=60109)
#Check the method mice used to impute
imp$method
#mice has identified the correct distribution for each variable. But, if you want to change the method used, you can do the following:
meth <- imp$method
# Numeric variables - normal distribution (we are using "Linear regression, non-Bayesian" method to impute bmi)
norm <- c("bmi")
# Numeric variables - non-normal distribution
nonnorm <- c("eq5d0", "imdscore")
# Dichotomous variable
log <- c("ethnic", "smoking")
# Turn their methods matrix into the specified imputation models
meth[norm] <- "norm.nob"
meth[nonnorm] <- "pmm"
meth[log] <- "logreg"
imp2 <- mice(data[impmodel_var], m=5, maxit = 0, method = meth, seed=60109)
#3.3) Check that mice is using the specific method
imp2$method
#library(mice) #this packages is already above
##3.1) Choose the variables we want to include in the imputation model
names(data)
##3.2) Select them
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking") #3.2
#We run the mice code with 0 iterations(it is just for the purpose of this example)
imp <- mice(data[impmodel_var], m=5, maxit=0, seed=60109)
#Check the method mice used to impute
imp$method
#mice has identified the correct distribution for each variable. But, if you want to change the method used, you can do the following:
meth <- imp$method
# Numeric variables - normal distribution (we are using "Linear regression, non-Bayesian" method to impute bmi)
norm <- c("bmi")
# Numeric variables - non-normal distribution
nonnorm <- c("eq5d0", "imdscore")
# Dichotomous variable
log <- c("ethnic", "smoking")
# Turn their methods matrix into the specified imputation models
meth[norm] <- "norm.nob"
meth[nonnorm] <- "pmm"
meth[log] <- "logreg"
imp2 <- mice(data[impmodel_var], m=5, maxit = 0, method = meth, seed=60109)
#3.3) Check that mice is using the specific method
imp2$method
#library(mice) #this packages is already above
##3.1) Choose the variables we want to include in the imputation model
names(data)
##3.2) Select them
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking") #3.2
#We run the mice code with 0 iterations(it is just for the purpose of this example)
imp <- mice(data[impmodel_var], m=5, maxit=0, seed=60109)
#Check the method mice used to impute
imp$method
#mice has identified the correct distribution for each variable. But, if you want to change the method used, you can do the following:
meth <- imp$method
# Numeric variables - normal distribution (we are using "Linear regression, non-Bayesian" method to impute bmi)
norm <- c("bmi")
# Numeric variables - non-normal distribution
nonnorm <- c("eq5d0", "imdscore")
# Dichotomous variable
log <- c("ethnic", "smoking")
# Turn their methods matrix into the specified imputation models
meth[norm] <- "norm.nob"
meth[nonnorm] <- "pmm"
meth[log] <- "logreg"
imp2 <- mice(data[impmodel_var], m=5, maxit = 0, method = meth, seed=60109)
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")
imp = mice(data[impmodel_var], maxit=10, m = 5, seed=60109)  #4.1
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0)) #4.2
summary(pool(fit), conf.int = TRUE) #4.3
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking") #3.2
imp = mice(data[impmodel_var], maxit=10, m = 5, seed=60109)  #4.1
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0)) #4.2
summary(pool(fit), conf.int = TRUE) #4.3
#Observe which values has been imputed
stripplot(imp) #blue = observed data; red = imputed data
bwplot(imp)    #blue = observed data; red = imputed data
densityplot(imp) #blue line = observed data; red lines = imputed data
densityplot(imp) #blue line = observed data; red lines = imputed data
#Model the probability of each record being incomplete as a function of all variables in each imputed data set.
fit <- with(imp, glm(ici(imp)~ohsdiff+age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0, family = binomial))
# The probabilities (propensities) are then averaged over the imputed datasets to obtain stability.
ps <- rep(rowMeans(sapply(fit$analyses, fitted.values)),
imp$m + 1)
#Plot the each variable against the propensity score in each dataset:
#blue = observed data; red = imputed data
xyplot(imp, bmi ~ ps | as.factor(.imp),
xlab = "Probability that record is incomplete",
ylab = "BMI", pch = c(1, 19), col = mdc(1:2))
xyplot(imp, eq5d0 ~ ps | as.factor(.imp),
xlab = "Probability that record is incomplete",
ylab = "EQ5D0", pch = c(1, 19), col = mdc(1:2))
xyplot(imp, ethnic ~ ps | as.factor(.imp),
xlab = "Probability that record is incomplete",
ylab = "Ethnic", pch = c(1, 19), col = mdc(1:2))
xyplot(imp, imdscore ~ ps | as.factor(.imp),
xlab = "Probability that record is incomplete",
ylab = "imdscore", pch = c(1, 19), col = mdc(1:2))
xyplot(imp, smoking ~ ps | as.factor(.imp),
xlab = "Probability that record is incomplete",
ylab = "Smoking", pch = c(1, 19), col = mdc(1:2))
#Complete cases results:variables names, OR, Low and High CI
fit0 =lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0, data=na.omit(data))
print("Using complete cases")
print( cbind(OR=summary(fit0)$coefficients[,1],confint(fit0)) )
#Imputed results: variables names, OR, Low and High CI
fit = with(data=imp,expr = lm(ohsdiff~age+sex+bmi+eq5d0+ethnic+imdscore+smoking+ohs0))
print("Using imputed data")
summary(pool(fit), conf.int = TRUE)[c(1,2,7,8)]
impmodel_var=c("age","sex","ohs0","ohsdiff","ethnic","eq5d0","bmi","imdscore","smoking")#3.2
imp = mice(data[impmodel_var], maxit=10, m = 5, seed=60109)   #6.1
imp.data = complete(imp , "long")   #6.2
table(imp.data$.imp)                #6.3
Fit.list = vector("list", length(unique(imp.data$.imp))) #6.4
Fit.list2= vector("list", length(unique(imp.data$.imp))) #6.4
for (i in unique(imp.data$.imp)) {  #6.5 Loop start
fit = lm(ohsdiff~age+sex+ethnic+eq5d0+imdscore+bmi+smoking+ohs0, data = imp.data[imp.data$.imp == i,])
Fit.list[[i]]= summary(fit)
} #6.5 Loop end
Fit.list.mira = as.mira(Fit.list)   #6.6
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
#install.packages("dplyr")
library(dplyr)
library(tibble)
#See your working directory
getwd()
#Update your working directory to the folder where "hip.data" is stored (if necessary)
update_wd = "NO" #"NO" for keeping the current working directory. "YES" to update, plus including the new path in folder_path variable below.
if(update_wd == "YES"){
folder_path <- ("C:/")  #Remind to use / (NOT \)
setwd(folder_path)
}
#load data
data <- tibble(read.csv("hip.csv", sep=','))
#Display the names of variables in the data set.
names(data)
#transform/include labels to data
data = data %>%
mutate(sex = factor(sex, levels = c(0,1), labels = c("Male","Female")),
retired = factor(retired, levels = c(0,1), labels = c("Not retired","Retired")),
ethnic = factor(ethnic, levels = c(0,1), labels = c("White","Non white")),
side = factor(side, levels = c(0,1), labels = c("Right","Left")),
smoking = factor(smoking, levels = c(0,1), labels = c("Non-smoker","Smoker")),
occupation = factor(data$occupation, levels = c(0,1), labels = c("Non-manual worker","Manual worker")) )
#Observe/explore the data
dim(data)
summary(data)
#list the variables you want to test
miss_var_list = c("eq5d0", "ethnic", "imdscore", "bmi", "smoking")
complete_var  = c("age", "sex", "ohsdiff","ohs0")
#install.packages("ggcorrplot")
library(ggcorrplot)
#Generate a data frame where missing variables are codified by 0=non-missing value and 1=missing value:
miss_data =  data %>% mutate(
miss_eq5d0= ifelse(is.na(eq5d0),1,0),
miss_ethnic= ifelse(is.na(ethnic),1,0),
miss_imdscore= ifelse(is.na(imdscore),1,0),
miss_bmi=ifelse(is.na(bmi),1,0),
miss_smoking= ifelse(is.na(smoking),1,0) )
corr_var = c("miss_eq5d0", "miss_ethnic", "miss_imdscore", "miss_bmi", "miss_smoking", complete_var)
model.matrix(~0+., data=miss_data[corr_var]) %>%
cor(use="pairwise.complete.obs")  %>%
ggcorrplot(show.diag = F, type="lower", lab=TRUE, lab_size=2)
#list the variables you want to test
miss_var_list = c("eq5d0", "bmi", "ethnic", "imdscore","smoking")
complete_var  = c("age", "sex", "retired", "ohsdiff","side","occupation")
for (v in 1:length(miss_var_list)){
miss_var = ifelse(is.na(data[[miss_var_list[v]]]), 1, 0)
test = glm(miss_var ~ ., data=data[complete_var] )
print(paste("Tested variable: ", miss_var_list[v], sep=""))
print(summary(test))   #Check p_value
}
